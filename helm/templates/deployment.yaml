apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pihole.fullname" . }}
  labels:
    {{- include "pihole.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "pihole.selectorLabels" . | nindent 6 }}
    {{- with .Values.updateStrategy }}
  strategy:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "pihole.selectorLabels" . | nindent 8 }}
        {{- with .Values.commonLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "pihole.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            {{- range $key, $value :=  .Values.env }}
            - name: {{ $key | upper | replace "-" "_" }}
              value: {{ $value | quote }}
            {{- end }}
            - name: WEBPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pihole-secret
                  key: password
          ports:
            - containerPort: 80
          lifecycle:
            postStart:
              exec:
                command: ['/bin/sh', '-c', '/bin/rm -f /etc/pihole/gravity.db']
          livenessProbe:
            tcpSocket:
              port: 80
            initialDelaySeconds: 15
            timeoutSeconds: 10
            periodSeconds: 120
            failureThreshold:
          readinessProbe:
            exec:
              command: ['dig', '@127.0.0.1', 'google.com']
            timeoutSeconds: 10
            initialDelaySeconds: 5
            periodSeconds: 30
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- if .Values.customConfig.enabled }}
          volumeMounts:
            {{- if .Values.customConfig.whiteList.enabled }}
            - name: pihole-white
              mountPath: "/etc/pihole/whitelist.txt"
              subPath: whitelist.txt
            {{- end }}
            {{- if .Values.customConfig.adList.enabled }}
            - name: pihole-ads
              mountPath: "/etc/pihole/adlists.list"
              subPath: adlists.list
            {{- end }}
            {{- if .Values.customConfig.blackList.enabled }}
            - name: pihole-regex
              mountPath: "/etc/pihole/regex.list"
              subPath: regex.list
            {{- end }}
      volumes:
        {{- if .Values.customConfig.whiteList.enabled }}
        - name: pihole-white
          configMap:
           name: pihole-white
           items:
            - key: whitelist.txt
              path: whitelist.txt
        {{- end }}
        {{- if .Values.customConfig.adList.enabled }}
        - name: pihole-ads
          configMap:
           name: pihole-ads
           items:
            - key: adlists.list
              path: adlists.list
        {{- end }}
        {{- if .Values.customConfig.blackList.enabled }}
        - name: pihole-regex
          configMap:
           name: pihole-regex
           items:
            - key: regex.list
              path: regex.list
        {{- end }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
